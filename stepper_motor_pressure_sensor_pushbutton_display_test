#include <Wire.h>
#include <Adafruit_SSD1306.h>

#define PRESSEURE_PIN A0;
int pushmotor =  5;          // Introducing push buttons for max, min selection
int pushmax = 4;
// Display
#define OLED_RESET 13
Adafruit_SSD1306 display(OLED_RESET);

int val;
int state = 1;
int mappedValue;  
int maxValue = 0;        // variable to store the maximum value
int minValue = 1023;     // variable to store the minimum value, initialized to the maximum possible value


const int analogPin = A1; // Pin connected to the battery voltage divider
const float batteryVoltageDividerRatio = 1; // Voltage divider ratio
const float batteryNominalVoltage = 3.7; // Nominal voltage of the 18650 battery
const int maxBatteryPercentage = 100; // Maximum battery percentage

const int stepPin = 11;
const int dirPin = 10;
const int enablePin = 9;
const int numSteps = 50;
const int speed0 = 1000;

//MAS Logo BitMap
const unsigned char masLogo [] PROGMEM = {
  // '2, 100x28px
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xfc, 0xff, 0xf3,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xf0, 0xfc, 0x7f, 0xe3, 0xff, 0xff, 0xe7,
  0xff, 0x3f, 0xff, 0x9f, 0xff, 0x00, 0x30, 0xfc, 0x3f, 0xc3, 0xff, 0xff, 0xe7, 0xfe, 0x3f, 0xff,
  0x1f, 0xfc, 0x00, 0x30, 0xf8, 0x1f, 0x81, 0xff, 0xff, 0xc3, 0xfe, 0x3f, 0xff, 0x1f, 0xfc, 0x00,
  0x70, 0xf8, 0x0f, 0x01, 0xff, 0xff, 0xc3, 0xfe, 0x3f, 0xfe, 0x0f, 0xf8, 0x7f, 0xf0, 0xf8, 0x06,
  0x01, 0xff, 0xff, 0xc3, 0xfc, 0x1f, 0xfe, 0x0f, 0xf8, 0x7f, 0xf0, 0xf0, 0x04, 0x00, 0xff, 0xff,
  0xc1, 0xfc, 0x1f, 0xfc, 0x07, 0xf8, 0xff, 0xf0, 0xf0, 0x04, 0x00, 0xff, 0xff, 0xc1, 0xfc, 0x1f,
  0xfc, 0x07, 0xf8, 0x7f, 0xf0, 0xf0, 0x0c, 0x00, 0xff, 0xff, 0xc1, 0xfc, 0x1f, 0xfc, 0x47, 0xf8,
  0x7f, 0xf0, 0xf0, 0x1c, 0x00, 0x7f, 0xff, 0x80, 0xf8, 0x0f, 0xf8, 0x43, 0xf8, 0x3f, 0xf0, 0xe0,
  0x3e, 0x00, 0x7f, 0xff, 0x80, 0xf8, 0x0f, 0xf8, 0xe3, 0xfc, 0x1f, 0xf0, 0xe0, 0x1e, 0x00, 0x7f,
  0xff, 0x88, 0xf8, 0x8f, 0xf8, 0xe3, 0xfe, 0x07, 0xf0, 0xe0, 0x1e, 0x00, 0x7f, 0xff, 0x88, 0x70,
  0x8f, 0xf0, 0xe1, 0xff, 0x00, 0xf0, 0xe0, 0x1e, 0x00, 0x3f, 0xff, 0x0c, 0x71, 0x8f, 0xf1, 0xe1,
  0xff, 0xc0, 0x70, 0xc0, 0x0f, 0x00, 0x3f, 0xff, 0x0c, 0x71, 0x87, 0xe1, 0xf1, 0xff, 0xf0, 0x30,
  0xc0, 0x0f, 0x00, 0x3f, 0xff, 0x1c, 0x23, 0xc7, 0xe3, 0xf0, 0xff, 0xfc, 0x30, 0xc0, 0x0f, 0x00,
  0x1f, 0xff, 0x1e, 0x23, 0xc7, 0xc3, 0xf8, 0xff, 0xfe, 0x10, 0xc0, 0x0f, 0x80, 0x1f, 0xff, 0x1e,
  0x03, 0xc7, 0xc0, 0x00, 0x7f, 0xfe, 0x10, 0x80, 0x07, 0x80, 0x1f, 0xfe, 0x1e, 0x03, 0xc7, 0xc0,
  0x00, 0x7f, 0xff, 0x10, 0x80, 0x07, 0x80, 0x1f, 0xfe, 0x1f, 0x07, 0xc3, 0x80, 0x00, 0x3f, 0xfe,
  0x10, 0x80, 0x07, 0x80, 0x0f, 0xfe, 0x1f, 0x07, 0xc3, 0x87, 0xfc, 0x3f, 0xfe, 0x10, 0x80, 0x07,
  0xc0, 0x0f, 0xfe, 0x3f, 0x8f, 0xe3, 0x0f, 0xfc, 0x3d, 0xfc, 0x10, 0x00, 0x03, 0xc0, 0x0f, 0xfe,
  0x3f, 0x8f, 0xe3, 0x0f, 0xfe, 0x1c, 0x10, 0x30, 0x00, 0x03, 0xc0, 0x07, 0xfc, 0x3f, 0x8f, 0xe2,
  0x1f, 0xfe, 0x18, 0x00, 0x70, 0x00, 0x03, 0xe0, 0x07, 0xfc, 0x3f, 0xdf, 0xe0, 0x1f, 0xfe, 0x1c,
  0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0x07, 0xf0, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0
};


void setup() {

  Serial.begin(9600);
  
  // pin Declaration:
  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(enablePin, OUTPUT);
  pinMode(pushmax, INPUT_PULLUP);
  pinMode(pushmotor, INPUT_PULLUP);

// Display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.setTextColor(WHITE);

//  display.clearDisplay(); // Clear the buffer.
//  display.drawBitmap(14, 0, masLogo, 100, 28, WHITE);
//  display.display();
//  delay(2000);
//
//  display.clearDisplay();
//  display.setTextSize(2);
//  display.setTextColor(WHITE);
//  display.setCursor(20, 0);
//  display.println("MACHINE");
//  display.setCursor(30, 17);
//  display.println("BUILD");
//  display.display();
//  delay(1000);
//
//  display.clearDisplay();
//  display.setTextSize(2);
//  display.setTextColor(WHITE);
//  display.setCursor(40, 0);
//  display.println("TTM");
//  display.setCursor(35, 17);
//  display.println("V1.0 ");
//  display.display();
//  delay(1000);
//
//  display.clearDisplay();
//  display.setTextSize(1);
//  display.setTextColor(WHITE);
//  display.setCursor(0, 0);
//  display.println("Remove all Weight");
//  display.println("from the Pullys");
//  display.display();
//  delay(2500);
//
//  display.clearDisplay();
//  display.setTextSize(2);
//  display.setTextColor(WHITE);
//  display.setCursor(30, 0);
//  display.println("System");
//  display.setCursor(25, 14);
//  display.println("Loading");
//  display.display();
//  delay(2000);

}

void loop() {

  // Display
  display.clearDisplay();
  int batteryReading = analogRead(analogPin); // Read the battery voltage from the voltage divider
  float batteryVoltage = batteryReading * (5.0 / 1023.0) * batteryVoltageDividerRatio; // Convert the analog reading to a voltage
  int batteryPercentage = map(batteryVoltage, 0, 4.2, 0, maxBatteryPercentage); // Map the voltage to a battery percentage between 0 and 100
  
  //  display.setCursor(80, 2);
  display.setCursor(100, 2);
  display.setTextSize(0.5);
  //  display.println("Battery: ");
  //  display.setCursor(95, 10);
  display.print(batteryPercentage);
  display.print("%");
 // display.display();
  //delay(1000); // Wait for 1 second before taking another reading

  display.setCursor(5, 2);
  display.setTextSize(1);
  display.println("Tension: ");
  display.setCursor(28, 15);
  display.setTextSize(2);
  display.println(mappedValue);
  display.display();
  delay(10);
  
 // display.clearDisplay();
  
  display.setCursor(100, 2);
  display.setTextSize(0.5);
  //  display.println("Battery: ");
  //  display.setCursor(95, 10);
  display.print(batteryPercentage);
  display.print("%");
  display.display();
  //delay(1000); // Wait for 1 second before taking another reading
 
//  display.setCursor(0, 0);
//  display.setTextSize(2);
//  display.println("Test is");
//  display.println("Sucsessful");
//  display.display();
//  delay(1000);

  int button=digitalRead(pushmotor);

  if(button==0){
  
      // Stepper motor:
     digitalWrite(dirPin, LOW);
     digitalWrite(enablePin, LOW);
   //  for (int i = 0; i < 150; i++) {
       digitalWrite(stepPin, HIGH);
       delayMicroseconds(speed0);
       digitalWrite(stepPin, LOW);
       delayMicroseconds(speed0);
   //  }
  
  
    // Pressure sensor
   val = analogRead(A0);
   delay(10);
   Serial.print("Pressure :");
   //Serial.println(val);}

   // Map the sensor reading from 1023-0 to 0-100
   mappedValue = map(val, 0, 1023, 1000, 0);

   if (digitalRead(pushmax) == HIGH) {
     state = 1;
   }
   if (digitalRead(pushmax) == LOW) {
     state = 2;
     
   }


   //sensorValue = analogRead(sensorPin);   // read the analog value from the sensor
   if (state == 1){ 
     if (mappedValue > maxValue) {          // if the sensor value is greater than the current maximum value
       maxValue = mappedValue;              // set the maximum value to the sensor value
//       Serial.print("Max value: ");           
//       Serial.print(maxValue);                // print the maximum value to the serial monitor
     }
     Serial.print("Max value: ");           
     Serial.println(maxValue);                // print the maximum value to the serial monitor

   }

   if (state == 2){ 
     if (mappedValue < maxValue) {          // if the sensor value is less than the current minimum value
      maxValue = mappedValue;              // set the minimum value to the sensor value
//      Serial.print(" Min value: ");
//      Serial.println(minValue);               // print the minimum value to the serial monitor
     }
   Serial.print(" Min value: ");
   Serial.println(maxValue);               // print the minimum value to the serial monitor

   }     // Print the mapped value
   //Serial.println(mappedValue);
}
